{
  "type": "protocol",
  "name": "fifo_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2023 Valve Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_fifo_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "When a Wayland compositor considers applying a content update,\nit must ensure all the update's readiness constraints (fences, etc)\nare met.\n\nThis protocol provides a way to use the completion of a display refresh\ncycle as an additional readiness constraint.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
        "summary": "protocol for fifo constraints"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Informs the server that the client will no longer be using\nthis protocol object. Existing objects created by this object\nare not affected.",
            "summary": "unbind from the manager interface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_fifo",
          "description": {
            "type": "description",
            "text": "Establish a fifo object for a surface that may be used to add\ndisplay refresh constraints to content updates.\n\nOnly one such object may exist for a surface and attempting\nto create more than one will result in an already_exists\nprotocol error. If a surface is acted on by multiple software\ncomponents, general best practice is that only the component\nperforming wl_surface.attach operations should use this protocol.",
            "summary": "request fifo interface for surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_fifo_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These fatal protocol errors may be emitted in response to\nillegal requests.",
            "summary": "fatal presentation error"
          },
          "entries": [
            {
              "type": "entry",
              "name": "already_exists",
              "value": "0",
              "summary": "fifo manager already exists for surface"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_fifo_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A fifo object for a surface that may be used to add\ndisplay refresh constraints to content updates.",
        "summary": "fifo interface"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_barrier",
          "description": {
            "type": "description",
            "text": "When the content update containing the \"set_barrier\" is applied,\nit sets a \"fifo_barrier\" condition on the surface associated with\nthe fifo object. The condition is cleared immediately after the\nfollowing latching deadline for non-tearing presentation.\n\nThe compositor may clear the condition early if it must do so to\nensure client forward progress assumptions.\n\nTo wait for this condition to clear, use the \"wait_barrier\" request.\n\n\"set_barrier\" is double-buffered state, see wl_surface.commit.\n\nRequesting set_barrier after the fifo object's surface is\ndestroyed will generate a \"surface_destroyed\" error.",
            "summary": "sets the start point for a fifo constraint"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "wait_barrier",
          "description": {
            "type": "description",
            "text": "Indicate that this content update is not ready while a\n\"fifo_barrier\" condition is present on the surface.\n\nThis means that when the content update containing \"set_barrier\"\nwas made active at a latching deadline, it will be active for\nat least one refresh cycle. A content update which is allowed to\ntear might become active after a latching deadline if no content\nupdate became active at the deadline.\n\nThe constraint must be ignored if the surface is a subsurface in\nsynchronized mode. If the surface is not being updated by the\ncompositor (off-screen, occluded) the compositor may ignore the\nconstraint. Clients must use an additional mechanism such as\nframe callbacks or timestamps to ensure throttling occurs under\nall conditions.\n\n\"wait_barrier\" is double-buffered state, see wl_surface.commit.\n\nRequesting \"wait_barrier\" after the fifo object's surface is\ndestroyed will generate a \"surface_destroyed\" error.",
            "summary": "adds a fifo constraint to a content update"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Informs the server that the client will no longer be using\nthis protocol object.\n\nSurface state changes previously made by this protocol are\nunaffected by this object's destruction.",
            "summary": "destroy the fifo interface"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "These fatal protocol errors may be emitted in response to\nillegal requests.",
            "summary": "fatal error"
          },
          "entries": [
            {
              "type": "entry",
              "name": "surface_destroyed",
              "value": "0",
              "summary": "the associated surface no longer exists"
            }
          ]
        }
      ]
    }
  ]
}
